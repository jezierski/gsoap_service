// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* homesys.h
   Generated by wsdl2h 2.8.16 from homesys.wsdl and /usr/share/gsoap/WS/typemap.dat
   2014-09-13 16:23:39 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2000-2013 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on homesys.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following licenses:
GPL or Genivia's license for commercial use.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://adjserwer.dyndns.org/soap_server/webservice/homesys.wsdl          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"
#import "xsd.h"	// import primitive XSD types.

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://adjserwer.dyndns.org/soap_server/webservice/homesys.wsdl"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://adjserwer.dyndns.org/soap_server/webservice/homesys.wsdl"
//gsoap ns1   schema namespace:	http://adjserwer.dyndns.org/soap_server/webservice/homesys.wsdl
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


//  xsd.h: typemap override of type xsd__string with std::string

//  xsd.h: should define type xsd__integer

/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class ns1__responseType.
class ns1__responseType;

//  Forward declaration of class ns1__valuesType.
class ns1__valuesType;

//  Forward declaration of class ns1__valueType.
class ns1__valueType;

//  Forward declaration of class ns1__SDeviceDescription.
class ns1__SDeviceDescription;

//  Forward declaration of class ns1__devicesList.
class ns1__devicesList;

//  Forward declaration of class ns1__filesList.
class ns1__filesList;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://adjserwer.dyndns.org/soap_server/webservice/homesys.wsdl          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://adjserwer.dyndns.org/soap_server/webservice/homesys.wsdl          *
 *                                                                            *
\******************************************************************************/


/// "http://adjserwer.dyndns.org/soap_server/webservice/homesys.wsdl":responseType is a complexType.
/// class ns1__responseType operations:
/// - soap_new_ns1__responseType(soap*) allocate
/// - soap_new_ns1__responseType(soap*, int num) allocate array
/// - soap_new_req_ns1__responseType(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__responseType(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__responseType(soap*, ns1__responseType*) deserialize from a stream
/// - int soap_write_ns1__responseType(soap, ns1__responseType*) serialize to a stream
class ns1__responseType
{ public:
/// Element result of type xs:string.
    std::string                          result                         1;	///< Required element.
/// Element values of type "http://adjserwer.dyndns.org/soap_server/webservice/homesys.wsdl":valuesType.
    ns1__valuesType*                     values                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://adjserwer.dyndns.org/soap_server/webservice/homesys.wsdl":valuesType is a complexType.
/// class ns1__valuesType operations:
/// - soap_new_ns1__valuesType(soap*) allocate
/// - soap_new_ns1__valuesType(soap*, int num) allocate array
/// - soap_new_req_ns1__valuesType(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__valuesType(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__valuesType(soap*, ns1__valuesType*) deserialize from a stream
/// - int soap_write_ns1__valuesType(soap, ns1__valuesType*) serialize to a stream
class ns1__valuesType
{ public:
/// Element responseMessage of type xs:string.
    std::string                          responseMessage                1;	///< Required element.
/// Element values of type "http://adjserwer.dyndns.org/soap_server/webservice/homesys.wsdl":valueType.
    ns1__valueType*                      values                         1;	///< Required element.
/// Element numValues of type xs:integer.
    xsd__integer                         numValues                      1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://adjserwer.dyndns.org/soap_server/webservice/homesys.wsdl":valueType is a complexType.
/// class ns1__valueType operations:
/// - soap_new_ns1__valueType(soap*) allocate
/// - soap_new_ns1__valueType(soap*, int num) allocate array
/// - soap_new_req_ns1__valueType(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__valueType(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__valueType(soap*, ns1__valueType*) deserialize from a stream
/// - int soap_write_ns1__valueType(soap, ns1__valueType*) serialize to a stream
class ns1__valueType
{ public:
/// Vector of xsd__integer with length 1..unbounded
    std::vector<xsd__integer           > value                          1;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://adjserwer.dyndns.org/soap_server/webservice/homesys.wsdl":SDeviceDescription is a complexType.
/// class ns1__SDeviceDescription operations:
/// - soap_new_ns1__SDeviceDescription(soap*) allocate
/// - soap_new_ns1__SDeviceDescription(soap*, int num) allocate array
/// - soap_new_req_ns1__SDeviceDescription(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__SDeviceDescription(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__SDeviceDescription(soap*, ns1__SDeviceDescription*) deserialize from a stream
/// - int soap_write_ns1__SDeviceDescription(soap, ns1__SDeviceDescription*) serialize to a stream
class ns1__SDeviceDescription
{ public:
/// Element GUID of type xs:integer.
    xsd__integer                         GUID                           1;	///< Required element.
/// Element LUID of type xs:integer.
    xsd__integer                         LUID                           1;	///< Required element.
/// Element category of type xs:integer.
    xsd__integer                         category                       1;	///< Required element.
/// Element name of type xs:string.
    std::string                          name                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://adjserwer.dyndns.org/soap_server/webservice/homesys.wsdl":devicesList is a complexType.
/// class ns1__devicesList operations:
/// - soap_new_ns1__devicesList(soap*) allocate
/// - soap_new_ns1__devicesList(soap*, int num) allocate array
/// - soap_new_req_ns1__devicesList(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__devicesList(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__devicesList(soap*, ns1__devicesList*) deserialize from a stream
/// - int soap_write_ns1__devicesList(soap, ns1__devicesList*) serialize to a stream
class ns1__devicesList
{ public:
/// Vector of ns1__SDeviceDescription* with length 1..unbounded
    std::vector<ns1__SDeviceDescription*> item                           1;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://adjserwer.dyndns.org/soap_server/webservice/homesys.wsdl":filesList is a complexType.
/// class ns1__filesList operations:
/// - soap_new_ns1__filesList(soap*) allocate
/// - soap_new_ns1__filesList(soap*, int num) allocate array
/// - soap_new_req_ns1__filesList(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__filesList(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__filesList(soap*, ns1__filesList*) deserialize from a stream
/// - int soap_write_ns1__filesList(soap, ns1__filesList*) serialize to a stream
class ns1__filesList
{ public:
/// Vector of std::string with length 1..unbounded
    std::vector<std::string            > fileName                       1;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://adjserwer.dyndns.org/soap_server/webservice/homesys.wsdl          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://adjserwer.dyndns.org/soap_server/webservice/homesys.wsdl          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	homesys 
//gsoap ns1  service type:	homesysPortType 
//gsoap ns1  service port:	http://192.168.1.39:1234 
//gsoap ns1  service namespace:	http://adjserwer.dyndns.org/soap_server/webservice/homesys.wsdl 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage homesys Definitions

@section homesys_bindings Service Bindings

  - @ref homesys

@section homesys_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page homesys Binding "homesys"

@section homesys_service Service Documentation "homesys"
gSOAP 2.7.9k generated service definition

@section homesys_operations Operations of Binding  "homesys"

  - @ref ns1__getXML

  - @ref ns1__searchNewDevices

  - @ref ns1__setDeviceName

  - @ref ns1__saveXML

  - @ref ns1__switchPort

  - @ref ns1__makeRemoteAction

  - @ref ns1__getDevicesList

  - @ref ns1__getFilesList

  - @ref ns1__uploadFirmware

@section homesys_ports Endpoints of Binding  "homesys"

  - http://192.168.1.39:1234

Note: use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   homesys                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getXML                                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__getXML" of service binding "homesys"

/**

Operation details:

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getXML(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         id,
    // output parameters:
    std::string                        &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getXML(
    struct soap *soap,
    // input parameters:
    std::string                         id,
    // output parameters:
    std::string                        &result
  );
@endcode

C++ proxy class (defined in soaphomesysProxy.h):
@code
  class homesysProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soaphomesysService.h):
@code
  class homesysService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getXML SOAP
//gsoap ns1  service method-style:	getXML rpc
//gsoap ns1  service method-encoding:	getXML http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	getXML ""
//gsoap ns1  service method-output-action:	getXML Response
int ns1__getXML(
    std::string                         id,	///< Input parameter
    std::string                        &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__searchNewDevices                                                    *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__searchNewDevicesResponse" of operation "ns1__searchNewDevices"
struct ns1__searchNewDevicesResponse
{
};

/// Operation "ns1__searchNewDevices" of service binding "homesys"

/**

Operation details:

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__searchNewDevices(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    xsd__integer                        category,
    // output parameters:
    struct ns1__searchNewDevicesResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__searchNewDevices(
    struct soap *soap,
    // input parameters:
    xsd__integer                        category,
    // output parameters:
    struct ns1__searchNewDevicesResponse&
  );
@endcode

C++ proxy class (defined in soaphomesysProxy.h):
@code
  class homesysProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soaphomesysService.h):
@code
  class homesysService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	searchNewDevices SOAP
//gsoap ns1  service method-style:	searchNewDevices rpc
//gsoap ns1  service method-encoding:	searchNewDevices http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	searchNewDevices ""
//gsoap ns1  service method-output-action:	searchNewDevices Response
int ns1__searchNewDevices(
    xsd__integer                        category,	///< Input parameter
    struct ns1__searchNewDevicesResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__setDeviceName                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__setDeviceName" of service binding "homesys"

/**

Operation details:

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__setDeviceName(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__SDeviceDescription*            device,
    std::string                         name,
    // output parameters:
    std::string                        &response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__setDeviceName(
    struct soap *soap,
    // input parameters:
    ns1__SDeviceDescription*            device,
    std::string                         name,
    // output parameters:
    std::string                        &response
  );
@endcode

C++ proxy class (defined in soaphomesysProxy.h):
@code
  class homesysProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soaphomesysService.h):
@code
  class homesysService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	setDeviceName SOAP
//gsoap ns1  service method-style:	setDeviceName rpc
//gsoap ns1  service method-encoding:	setDeviceName http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	setDeviceName ""
//gsoap ns1  service method-output-action:	setDeviceName Response
int ns1__setDeviceName(
    ns1__SDeviceDescription*            device,	///< Input parameter
    std::string                         name,	///< Input parameter
    std::string                        &response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__saveXML                                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__saveXML" of service binding "homesys"

/**

Operation details:

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__saveXML(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         id,
    std::string                         body,
    // output parameters:
    std::string                        &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__saveXML(
    struct soap *soap,
    // input parameters:
    std::string                         id,
    std::string                         body,
    // output parameters:
    std::string                        &result
  );
@endcode

C++ proxy class (defined in soaphomesysProxy.h):
@code
  class homesysProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soaphomesysService.h):
@code
  class homesysService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	saveXML SOAP
//gsoap ns1  service method-style:	saveXML rpc
//gsoap ns1  service method-encoding:	saveXML http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	saveXML ""
//gsoap ns1  service method-output-action:	saveXML Response
int ns1__saveXML(
    std::string                         id,	///< Input parameter
    std::string                         body,	///< Input parameter
    std::string                        &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__switchPort                                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__switchPort" of service binding "homesys"

/**

Operation details:

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__switchPort(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         pinNo,
    // output parameters:
    std::string                        &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__switchPort(
    struct soap *soap,
    // input parameters:
    std::string                         pinNo,
    // output parameters:
    std::string                        &result
  );
@endcode

C++ proxy class (defined in soaphomesysProxy.h):
@code
  class homesysProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soaphomesysService.h):
@code
  class homesysService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	switchPort SOAP
//gsoap ns1  service method-style:	switchPort rpc
//gsoap ns1  service method-encoding:	switchPort http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	switchPort ""
//gsoap ns1  service method-output-action:	switchPort Response
int ns1__switchPort(
    std::string                         pinNo,	///< Input parameter
    std::string                        &result	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__makeRemoteAction                                                    *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__makeRemoteActionResponse" of operation "ns1__makeRemoteAction"
struct ns1__makeRemoteActionResponse
{
    ns1__responseType*                  response;
};

/// Operation "ns1__makeRemoteAction" of service binding "homesys"

/**

Operation details:

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__makeRemoteAction(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__SDeviceDescription*            device,
    xsd__integer                        command,
    xsd__integer                        params,
    // output parameters:
    struct ns1__makeRemoteActionResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__makeRemoteAction(
    struct soap *soap,
    // input parameters:
    ns1__SDeviceDescription*            device,
    xsd__integer                        command,
    xsd__integer                        params,
    // output parameters:
    struct ns1__makeRemoteActionResponse&
  );
@endcode

C++ proxy class (defined in soaphomesysProxy.h):
@code
  class homesysProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soaphomesysService.h):
@code
  class homesysService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	makeRemoteAction SOAP
//gsoap ns1  service method-style:	makeRemoteAction rpc
//gsoap ns1  service method-encoding:	makeRemoteAction http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	makeRemoteAction ""
//gsoap ns1  service method-output-action:	makeRemoteAction Response
int ns1__makeRemoteAction(
    ns1__SDeviceDescription*            device,	///< Input parameter
    xsd__integer                        command,	///< Input parameter
    xsd__integer                        params,	///< Input parameter
    struct ns1__makeRemoteActionResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getDevicesList                                                      *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getDevicesListResponse" of operation "ns1__getDevicesList"
struct ns1__getDevicesListResponse
{
    ns1__devicesList*                   result;
};

/// Operation "ns1__getDevicesList" of service binding "homesys"

/**

Operation details:

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getDevicesList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    xsd__integer                        category,
    // output parameters:
    struct ns1__getDevicesListResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getDevicesList(
    struct soap *soap,
    // input parameters:
    xsd__integer                        category,
    // output parameters:
    struct ns1__getDevicesListResponse&
  );
@endcode

C++ proxy class (defined in soaphomesysProxy.h):
@code
  class homesysProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soaphomesysService.h):
@code
  class homesysService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getDevicesList SOAP
//gsoap ns1  service method-style:	getDevicesList rpc
//gsoap ns1  service method-encoding:	getDevicesList http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	getDevicesList ""
//gsoap ns1  service method-output-action:	getDevicesList Response
int ns1__getDevicesList(
    xsd__integer                        category,	///< Input parameter
    struct ns1__getDevicesListResponse &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__getFilesList                                                        *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getFilesListResponse" of operation "ns1__getFilesList"
struct ns1__getFilesListResponse
{
    ns1__filesList*                     result;
};

/// Operation "ns1__getFilesList" of service binding "homesys"

/**

Operation details:

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getFilesList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    // output parameters:
    struct ns1__getFilesListResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getFilesList(
    struct soap *soap,
    // input parameters:
    // output parameters:
    struct ns1__getFilesListResponse&
  );
@endcode

C++ proxy class (defined in soaphomesysProxy.h):
@code
  class homesysProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soaphomesysService.h):
@code
  class homesysService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getFilesList SOAP
//gsoap ns1  service method-style:	getFilesList rpc
//gsoap ns1  service method-encoding:	getFilesList http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	getFilesList ""
//gsoap ns1  service method-output-action:	getFilesList Response
int ns1__getFilesList(
    struct ns1__getFilesListResponse   &	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__uploadFirmware                                                      *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__uploadFirmwareResponse" of operation "ns1__uploadFirmware"
struct ns1__uploadFirmwareResponse
{
};

/// Operation "ns1__uploadFirmware" of service binding "homesys"

/**

Operation details:

  - http://schemas.xmlsoap.org/soap/encoding/ RPC encodingStyle="SOAP"

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__uploadFirmware(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         fileName,
    // output parameters:
    struct ns1__uploadFirmwareResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__uploadFirmware(
    struct soap *soap,
    // input parameters:
    std::string                         fileName,
    // output parameters:
    struct ns1__uploadFirmwareResponse&
  );
@endcode

C++ proxy class (defined in soaphomesysProxy.h):
@code
  class homesysProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soaphomesysService.h):
@code
  class homesysService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	uploadFirmware SOAP
//gsoap ns1  service method-style:	uploadFirmware rpc
//gsoap ns1  service method-encoding:	uploadFirmware http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	uploadFirmware ""
//gsoap ns1  service method-output-action:	uploadFirmware Response
int ns1__uploadFirmware(
    std::string                         fileName,	///< Input parameter
    struct ns1__uploadFirmwareResponse &	///< Output response struct parameter
);

/**

@page homesys Binding "homesys"

@section homesys_policy_enablers Policy Enablers of Binding  "homesys"

Based on policies, this service imports

  - WS-Policy reminders and enablers:
    - WS-Addressing 1.0 (2005/08, accepts 2004/08):
	@code
	#import "wsa5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-Addressing (2004/08):
	@code
	#import "wsa.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-ReliableMessaging 1.0:
	@code
	#import "wsrm5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-ReliableMessaging 1.1:
	@code
	#import "wsrm.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.0 (accepts 1.1):
	@code
	#import "wsse.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.1 (accepts 1.0):
	@code
	#import "wsse11.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - HTTP Digest Authentication:
	@code
	#include "plugin/httpda.h"
	soap_register_plugin(soap, soap_http_da); // register the HTTP DA plugin in your code
	// See the user guide gsoap/doc/httpda/html/index.html
	@endcode
*/


/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read in XML and deserialized from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

Data can be serialized in XML and written to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns1 Top-level root elements of schema "http://adjserwer.dyndns.org/soap_server/webservice/homesys.wsdl"

*/

/* End of homesys.h */
